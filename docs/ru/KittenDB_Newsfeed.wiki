Еще бывает [[KittenDB_Comment_News.wiki|Comment Newsfeed]].

== Обращение к News Engine из PHP ==

<code>$MC_News = new Memcache ($engine_ip, $engine_port, ...);</code>

Далее доступ к данным осуществляется по аналогии с memcached, с помощью функций вроде
<br>
<pre>
$MC_News->get($key);
$result = $MC_News->set($key,$value,0,600);
$MC_News->delete($key);
$MC_News->increment($key,$value);
</pre>
<br>
для специально построенных ключей $key и значений $value.

== Список доступных функций ==

=== Добавление обновления ===
<code>
$MC_News->set("update$id", "$type,$user,$group,$owner,$place,$item", 0, 600);
</code>
<br>
Добавляет новое обновление, принадлежащее пользователю $id или группе -$id. Параметр - строка, состоящая из 6 чисел, имеющих следующий смысл:

{|
|-
| <tt>type</tt> || тип записи - число от 1 до 19
|-
| <tt>user</tt> || id пользователя, совершившего действие или 0; для обновлений пользователей поле почти всегда совпадает с $id
|-
| <tt>group</tt> || id группы, к которой относится действие или 0; для обновлений групп поле обязано совпадать с -$id
|-
| <tt>owner</tt> || владелец объекта, к которому относится действие; почти всегда равен id, user или -group; имеет смысл в паре с place и/или item
|-
| <tt>place</tt> || место, в котором было совершено действие (например, id альбома или темы)
|-
| <tt>item</tt> || объект, с которым было совершено действие (например, id добавленной фотографии или сообщения)
|}

Смысл поля <tt>type</tt>:

{|
|-
! <tt>type</tt> !! Смысл
|-
| 1 || Добавлена фотография owner+item в альбом owner+place, находящийся в группе group (от руководителей)
|-
| 2 || Добавлена заметка owner+item пользователем user (owner=user=id)
|-
| 3 || Пользователь id был отмечен пользователем user на фотографии owner+item, лежащей в альбоме owner+place
|-
| 4 || Добавлена видеозапись owner+item в группе group пользователем user
|-
| 5 || Пользователь id=user=owner обновил статус, item есть id нового статуса
|-
| 6 || Пользователь id=user добавил в друзья пользователя item
|-
| 7 || Пользователь id=user вступил в группу item
|-
| 8 || Пользователь id=user вышел из группы item
|-
| 9, 10 || Вход/выход из события
|-
| 11, 12 || Вход/выход из приложения
|-
| 13 || Пользователь user создал тему owner+item в группе group
|-
| 14 || Пользователь id получил подарок item от пользователя user
|-
| 15 || Добавлена аудиозапись owner+item в группе group пользователем user
|-
| 16 || В группе group=-id обновлены новости, owner+item=соответствующая вики-страница
|-
| 17 || У пользователя id=user=owner стало семейное положение place
|-
| 18* || Пользователь id получил денег на желание item от пользователя user (0 если от группы пользователей).
|-
| 19* || Пользователь id=user=owner обновил статус с привязкой с координатам, item равен id нового статуса
|-
| 20* || Добавлена фотография owner+item в альбом owner+place, находящийся в группе group (фото не от руководителей)
|}

Записи типа 1--15 относятся к обновлениям пользователей, записи типа 1, 4, 13, 15, 16 -- к группам.
<br>
Значения 17--20 используются в слежении за комментариями.

=== Удаление всех обновлений данного пользователя или группы ===
<code>delete("updates$id")</code>
<br>
Удаляет все обновления, созданные пользователем $id или группой -$id, и соответствующую настройку приватности.

=== Изменение настроек приватности ===
<code>$MC_News->set("mask$id", $mask, 0, 600);
<br>
$mask = $MC_News->get("mask$id");</code>
<br>
Устанавливает или получает значение битовой маски, запрещающей друзьям доступ к той или иной информации, относящейся к данному пользователю. Младший бит (нулевой) всегда установлен, значение по умолчанию = 1 (все биты сброшены, т.е. все обновления разрешены).

== Получение обновлений ==
<code>get("updates{$type_mask}_{$date},{$enddate}_{$grouping}:{$user_list}");</code>
<br>
<code>get("updates{$type_mask}_{$date},{$enddate}_{$grouping}>{$timestamp}:{$user_list}");</code>
<br>
<code>get("updates{$type_mask}_{$date},{$enddate}_{$grouping}#{$limit}:{$user_list}");</code>
<br>
<code>get("updates{$type_mask}_{$date},{$enddate}_{$grouping}>{$timestamp}#{$limit}:{$user_list}");</code>
<br>
Получает список обновлений, отфильтрованных по маске $type_mask, начиная с суток, определенных unixtime $date, до момента $enddate, если это не 0. Сутки отсчитываются по 24 часа, начиная с указанного момента времени до текущего момента.
<br>
Параметр $grouping равен 0, если не надо группировать однотипные записи; в противном случае он представляет собой максимальное возвращаемое количество различных значений параметров в каждой группе.
<br>
Параметр $timestamp, если он есть, означает, что нужно вернуть только записи, созданных после записи с данным timestamp. Параметр user_list представляет собой либо список id нужных пользователей, перечисленных через запятую, либо отрицательное число $list_tag, если этот список id очень большой.
<br>
Параметр $limit, если он есть, ограничивает сверху количество записей в возвращаемом массиве.

=== Передача большого списка пользователей ===
<code>set("userlist$list_tag", $list, 0, 600);</code>
<br>
Запоминает список пользователей, идентифицируемый ''отрицательным'' случайным числом $list_tag. Параметр $list есть список десятичных записей id пользователей, перечисленных через запятую. Кроме того, если $list начинается со строки <tt>0000</tt>, остаток разбивается на группы по 4 байта, каждая из которых интерпретируется как представление 32-битного id. Сразу после этого запроса должен следовать запрос вида <tt>get("updates...")</tt>, ссылающийся на только что переданный список по значению $list_tag.

=== Формат списка обновлений ===
Результирующий список обновлений возвращается в виде PHP-массива, элементами которого являются массивы, каждый из которых представляет собой обновление или группу обновлений в следующем формате:
<br>
<code>array($type,$user_id,$timestamp,$random_tag,$user,$group,$place,$item)</code>
<br>
Каждое из этих значений есть либо целое число, либо строка вида <tt>{$owner}_{$item}</tt>, либо массив значений, если значения подвергались группировке.
* $user_id есть id пользователя или группы, породившей событие.
* $timestamp=$date есть unixtime события; для группы событий это время последнего из них.
* $random_tag есть случайное 32-битное число, позволяющее различать различные записи с одним и тем же $timestamp.
* Если производится группировка событий, то у группы устанавливается $random_tag, равный $random_tag самого первого из группируемых событий. Таким образом, $random_tag однозначно идентифицирует блок в результирующей html-странице.
* Массивами могут оказаться только поля $user, $group, $place и $item.
* В массиве сгруппированные значения перечисляются в антихронологическом порядке. Кроме того, первым значением массива является общее количество различных значений данного параметра; далее идут список самих значений, но не более, чем $grouping значений.

=== Получение обновлений в "сыром" виде ===
<code>get("raw_updates{$type_mask}[{$startdate},{$enddate}]:{$user_list}");</code>
<br>
<code>get("raw_updates{$user_id}");</code>
<br>
Возвращает список обновлений для данного пользователя или списка пользователей в сыром виде: массив из 9N+1 чисел, первое число - N, количество возвращаемых записей, затем каждое обновление задается с помощью девяти чисел: $user_id,$timestamp,$random_tag,$type,$user,$group,$owner,$place,$item.
<br>
Обновления группируются по $user_id, а внутри - в антихронологическом порядке.
<br>
Если название ключа начинается с символа <tt>%</tt>, результат будет возвращен в двоичном виде как последовательность из 36N байтов.

=== TL-схема для RPC-запросов ===
См. файл news/news.tl .

