'''CopyExecute''' -- предназначен для репликации файлов и действий на большое количество серверов.

Важным параметром является '''instance_mask''' (32-битное целое, обычно задаваемое в командной строке), определяющее, какие транзакции будут выполняться локально, а какие --- игнорироваться.

Использует два бинлога: '''вспомогательный''' (read-only, содержит описания транзакций, обычно реплицируется на нужные сервера с помощью [[KittenDB_CopyFast.wiki|copyfast-engine]]) и '''основной''' (read-write, локальный, содержит описания результатов локального выполнения транзакций). Работа с основном бинлогом ведется стандартными функциями, а со вспомогательным - напрямую.

=== Формат вспомогательного бинлога ===
Вспомогательный бинлог состоит из последовательности '''транзакций'''. Каждая транзакция содержит длину, незащищенный заголовок, защищенный заголовок и тело. '''Незащищенный заголовок''' содержит идентификатор публичного ключа, которым подписывается (или шифруется) защищенный заголовок и тело. '''Защищенный заголовок''' содержит всю информацию из незащищенного заголовка, позицию транзакции в бинлоге, ее длину, порядковый номер транзакции (во избежание replay-атаки), crc32 защищенного заголовка с телом, а также маску транзакции (transaction_mask).
<br>
'''Тело транзакции''' представляет собой последовательность '''действий''' (фактически - отдельных log event'ов). Действия бывают следующих типов:
* '''cp filename''' - Создать временный файл (задается имя файла без пути, его длина и атрибуты, и его содержимое, запакованное gzip'ом; файл создается во временном каталоге транзакции). Имя файла, может быть абсолютным путем, в этом случае файл тоже будет создан во временном каталоге транзакции. В случае ошибки выполнения, '''copyexec-engine''' устанавливает результат транзакции в 0xff00 (например: закончилось место на диске).
* '''cp src_filename dst_filename''' - Аналогично предыдущей, но сохранить временный файл под именем '''dst_filename'''. 
* '''exec cmd''' - Выполнить команду (задается строка, передаваемая параметром в /bin/bash при запуске из временного каталога транзакции). Не изменяет ''результат выполнения транзакции''.
* '''exec_check cmd''' - Выполнить команду и прервать выполнение транзакции в том случае, если команда завершится с ненулевым кодом. Не изменяет ''результат выполнения транзакции''.
* '''wait X''' - Дождаться завершения транзакции X. '''X''' должно быть меньше, чем номер текущей транзакции. 
* '''cancel X''' - Отменить транзакцию X, но только в том случае, если мы еще ее не успели запустить. '''X''' должно быть меньше, чем номер текущей транзакции. 
* '''kill signal X''' - Прервать выполнение транзакции X (возможно, с указанием сигнала, с помощью которого это надо сделать) и дождаться ее завершения.
* '''result &lt;int&gt;''' - Установить ''результат выполнения транзакции'' в &lt;int&gt;. ''Результат выполнения транзакции'' - 28-битное целое.
* '''exec_result cmd''' - Установить ''результат выполнения транзакции'' в 16-битный статус. Cтарший байт статуса соответствует номеру сигнала, а младший байт - коду выхода.
Не реализованные действия:
* '''head N filename''' - Сохранить первые N байтов временного файла в основной бинлог. Функция не реализована, так как вместо этой команды можно писать "exec head -C N filename".
* '''wait''' - Подождать завершения всех команд, запущенных в текущей транзакции. Функция не реализована, так как команды запускаются последовательно.

Команды '''copyexec-commit''' задаются в файле '''actions''' транзакции и кроме перечисленных выше, бывают следующих типов:
* '''key N''' - Задает идентификатор ключа с помощью, которого шифруется транзакция ('''обязательная команда''')
* '''mask N''' - Задает маску транзакции  ('''обязательная команда'''). N может быть задано в шестнадцатеричной системе счисление (префикс '''0x'''), восьмеричной (префикс '''0''') или десятичной.
* '''rerun''' - Устанавливает флаг перезапускаемой транзакции.
* '''important''' - Устанавливает флаг важной транзакции.
* '''waiting''' - Устанавливает флаг, транзакция ждет завершение предыдущих транзакций с меньшими id.
* '''synchronize''' - Вместо транзакции вставить в дополнительный бинлог точку сихронизации, кроме этой команды в '''actions''' должны присутствовать только команды '''key''' и '''mask'''.
При создании основного бинлога, '''copyexec-engine''' сканирует вспомогательный бинлог, находит последнюю точку синхронизации и записывает в основной бинлог номер первой транзакции после точки синхронизации, с которой надо начать выполнение транзакций. Т.е. для создания нового основного бинлога, '''copyexec-engine''' необходимо передать префикс публичного ключа и основной бинлог.
=== Исполнение транзакции ===

Транзакция выполняется, если (transaction_mask & instance_mask != 0). В противном случае в основной бинлог пишется специальная запись "транзакция игнорирована", в которой фиксируется позиция начала и конца транзакции и ее порядковый номер.

Для ее выполнения создается временный каталог транзакции (подкаталог во временном каталоге, заданном в командной строке), имя которого есть позиция транзакции в бинлоге, и новый процесс (fork'ом и заменой его вида в ps). После этого создается запись в основной бинлог "транзакция выполняется" и выполняются действия - создаются файлы и выполняются команды. Команды выполняться последовательно, без ограничения по времени. Их код возврата и вывод (stderr/stdout) фиксируется в отдельный log event в основный бинлог, c ограничение на размер сохраняемых данных. Перед запуском команды также пишется log event в основной бинлог.

Транзакции выполняются в автономных от '''copyexec-engine''' процессах. При получении сигналов SIGINT/SIGTERM '''copyexec-engine''' завершает свою работу, а процессы транзакций продолжают работать дальше. При перезапуске '''copyexec-engine''' проверяют запущенные транзакции по pid и времени создания процесса. Если транзакции завершилась, но ее файл бинлога был удален, заменен, побился,  то '''copyexec-engine''' присвоит ей статус '''io_failed'''.

Если транзакция была отменена с помощью сигнала SIGINT или SIGTERM, она будет перезапущена после перезапуска '''copyexec-engine'''.

Бывают "перезапускаемые" транзакции, которые перезапускаются после запуска, если их текущий статус - '''interrupted''' или '''сancelled'''.

Отдельные команды внутри транзакции запускаются последовательно, без ограничения по времени.  Если при запуске команды, системный вызов ''fork'' вернул код ошибки или процесс транзакции не смог создать временные файлы (''stdout'', ''stderr''), транзакция будут прервана со статусом '''failed''', даже если тип действия '''exec''' или '''exec_result''', а не '''exec_check'''. При таких ошибках результат транзакции не изменяется.

Когда транзакция успешно или неуспешно завершается (что возможно только в том случае, если все порожденные процессы завершились, а их статус записан в основной бинлог), удаляются все файлы из временного каталога транзакции (не обязательно созданные самим '''copyexec-engine'''), а затем и сам временный каталог. Удалением занимается, главный процесс '''copyexec-engine''', после прочтения им файла бинлога транзакции.

Транзакции запускаются параллельно - '''copyexec-engine''' порождает новый процесс для обработки транзакции, а затем читает основной бинлог дальше. Eсли у транзакции установлен флаг "дождаться завершения всех предыдущих транзакций перед запуском", то и в этом случае '''copyexec-engine''' породит новый процесс, но никакие операции этой транзакции не будут выполняться, до тех пор пока не завершатся транзакции с меньшим id.

=== Состояние транзакции ===
{|
|+
|-
! статус !! описание
|-
| unset || '''copyexec-engine''' не прочитал транзакцию из дополнительного бинлога (упал '''copyfast-engine''', '''copyexec-engine''', '''copyexec-client'''). Также возможно, что '''copyexec-engine''', еще не переслал статус транзакции (running или ignored), так как пересылка осуществляется со случайной задержкой.
|-
| running || Транзакция выполняется.
|-
| ignored || Транзакция проигнорирована.
|-
| interrupted || Транзакция прервана. 
|-
| cancelled || Транзакция отменена. До первого вызова команд '''exec''', '''exec_result''', '''exec_check''', пришел cигнал SIGINT/SIGTERM или из другой транзакции было вызвано действие ''cancel''. Старший байт младшего слова результата транзакции хранит сигнал, отменивщий транзакцию.
|-
| terminated || Транзакция завершена.
|-
| failed || Транзакция завершена с ошибкой. Неудачное выполнение '''exec_check''' или '''cp'''.
|-
| io_failed || Транзакция завершена, но '''copyexec-engine''' не смог полностью прочитать временный файл бинлога транзакции. В этом случае, результат транзакции  будет содержать внутренний код ошибки '''copyexec-engine'''.
|}
Результат транзакции - изначально 0, затем изменяется с помощью операций '''result''' и '''exec_result'''.

=== Формат основного бинлога ===

Основной бинлог состоит из событий, отражающих начало и завершение выполнения транзакций, их отмену, прерывание, перезапуск, а также - запуск и завершение команд, входящих в транзакции, их pid, код возврата и (часть) вывода в stdout/stderr, и еще временные файлы, сохраненные специальным действием.

Важное требование: после прочтения основного бинлога должен быть понятен статус всех транзакций, особенно - незавершенных или еще незапущенных. После чего должно быть достаточно читать вспомогательный бинлог только начиная с самой старой незавершенной транзакции.

===copyexec-results-engine===
[[KittenDB_CopyExecResults.wiki|copyexec-results-engine]]

===Примеры===
<pre>exec_result cat /proc/meminfo | awk '/MemFree:/ { i = int ($2 / 100000); if (i > 120) i = 120; exit i }'</pre>
<br>
Статистика по серверам по свободной памяти c шагом 100Mb.
