Движок KittenDB Letters может использоваться для эмуляции очереди задач с
большим количеством возможных исполнителей. Хранит задачи до момента их
выполнения. В случае скопления слишком большой очереди задач, наиболее старые
из них автоматически начинают удаляться.

У каждой задачи есть следующие обязательные атрибуты:
<br>
id – уникальный идентификатор задачи, присваиваемый движком, 63-битное
положительное целое,
<br>
priority – приоритет задачи - целое число от 1-го до 9-ти,
<br>
task_id – идентификатор группы задач, к которому относится данная задача,
64-битное знаковое целое,
<br>
date_sent – дата создания/последней попытки выполнения задачи, присваивается
движком,
<br>
error_code – код ошибки при неудачном выполнении, строка,
<br>
send_after – момент времени, начиная с которого возможно выполнение задачи,
присваивается движком.

Остальные атрибуты опциональны, более того их набор может отличаться даже в
пределах одного экземпляра движка.

==Интерфейс==
Движок поддерживает memcached интерфейс.

===Добавление новой задачи===
set("letter{$server_num}[,{$delay}[,{$task_id}]]", $letter)
<br>
$server_num – номер сервера, на котором будет храниться задача до выполнения,
<br>
$delay – задержка перед выполнением задачи в секундах, не более 3600,
по умолчанию 0,
<br>
$task_id – идентификатор группы задач, к которому относится данная задача,
64-битное знаковое целое, по умолчанию 0,
<br>
$letter – сериализованный PHP-массив с полем priority и произвольным набором
других полей, отличных от task_id, send_after, date_sent, id и error_code. Все
поля должны иметь один из типов string, long, float или bool (автоматически
сконвертируется движком в int), размер сериализованного массива не должен
превышать 256000 байт. При использовании стандартного memcached расширения PHP,
сериализация будет происходить автоматически.

===Получение ещё не выполненных задач===
get("letters{$server_num},{$min_priority},{$max_priority}#{$cnt}")
<br>
$min_priority – минимальный приоритет,
<br>
$max_priority – максимальный приоритет,
<br>
$cnt – требуемое количество задач.
<br>
Задачи будут выбираться в порядке возрастания приоритета, а при равенстве
приоритета в порядке возрастания времени добавления. Результат возвращается
в виде PHP-массива из PHP-массивов с полями priority, send_after, date_sent,
error_code, id, а также со всеми дополнительными полями, которые присутствовали
при добавлении задач в движок. Отданные задачи не будут повторно отдаваться для
выполнения до истечения таймаута в 60 секунд или получения движком сообщения о
результате выполнения. Результат выполнения сообщается одним из двух ниже
описанных способов.

Для удаления записей сразу при получении можно использовать:
<br>
get("letters_immediate{$server_num},{$min_priority},{$max_priority}#{$cnt}")

===Сообщение о результате выполнения задачи===
delete("letter{$id}")
<br>
Задача выполнена успешно.

===Сообщение о результате выполнения задачи===
set("letter_priority{$id},{$new_priority}[,{$delay}]", $error_code)
<br>
Задачу не удалось выполнить. Получено сообщение об ошибке $error_code. Задача
помещается повторно в очередь для выполнения с приоритетом $new_priority и
дополнительной задержкой повторного выполнения $delay (не более 3600, по
умолчанию 0).

===Очистка очереди с заданным приоритетом===
get("clear_queue{$priority}")
<br>
$priority – приоритет очищаемой очереди.
<br>
Возвращает суммарный размер удалённых событий.
<br>
Если $priority = 0, то форсируется выполнение отложенных задач.

===Удаление группы задач по $task_id===
delete("letters_by_task_id{$task_id}")
<br>
$task_id – ненулевой идентификатор группы задач, 64-битное знаковое целое.
<br>
Удаляются ещё невыполненные задачи, относящиеся к переданному идентификатору,
и добавленные не позднее той же секунды, в которую пришла данная команда.
