KittenDB Search - семейство движков, обладающих общим интерфейсом и предназначенных для поиска по различным типам объектов. 

== Рейтинги объекта ==
Рейтинги нужны для того, чтобы по ним можно было сортировать или ограничивать по ним выборку поиска. 
<br>
Перечислим возможные типы рейтингов: rate, sate, date, bate, cate, fate, gate, hate, kate, late, mate, nate. 
<br>
Рейтинг date - это время последнего вызова set("item$item_id#$rate,$sate", "$title\t$description"); 
<br>
Rate и sate - это основные рейтинги, bate, cate, ..., hash - опциональные рейтинги.

Смысл их зависит от того, какого типа объект мы рассматриваем. 

Рейтинг должен быть 32-битным знаковым целым числом. 

== id объекта ==
id объекта имеет вид либо <tt>{$owner_id}_{$obj_id}</tt>, либо <tt>{$obj_id}</tt>. 
<i>при этом именно по $obj_id на самом деле и происходит сортировка в случае типов сортировки i и I</i>

== Поддерживаемые функции ==
=== Операции с  рейтингом объекта ===
<pre>
set("rate{$id}", $rate, $some_param, $expire); 
set("sate{$id}", $sate, $some_param, $expire); 
set("hate{$id}", $hate, $some_param, $expire); 
... 
get("rate{$id}"); 
get("sate{$id}"); 
get("hate{$id}"); 
...
</pre>
Позволяют устанавливать/получать соответствующий рейтинг объекта. 
<pre>
increment("rate{$id}", $delta); 
increment("sate{$id}", $delta); 
increment("hate{$id}", $delta); 
... 
decrement("rate{$id}", $delta); 
decrement("sate{$id}", $delta); 
decrement("hate{$id}", $delta); 
...
</pre>
Позволяют увеличивать/уменьшать соответствующий рейтинг объекта. Удобно использовать в случае если рейтингом является число пользователей объекта (например количество членов группы) 

Также существуют неиспользуемые в данный момент операции, 
<pre>
set("rates{$id}", "$rate,$sate"); 
get("rates{$id}");
</pre>
позволяющие устанавливать/получать сразу пару (rate, sate) 

=== Операции с хешем объекта ===
<blockquote>set("hash{$id}", $hash); </blockquote>
Устанавливает 64-битный хеш код ($hash - это строка из 16 hex-digits). 
<br>
Можно $hash присвоить значение вызова функции md5, тогда будут использоваться первые 16 hex-digits из 32 посланных. 
<blockquote>$hash = get("hash{$id}"); </blockquote>
Получает хеш объекта, как строку из 16 hex-digits. Если хеш не установлен, возвращает cтроку, состоящую из 1 нуля.

===Cтатистика===
<blockquote>get("worst_search_queries");</blockquote>
Возвращает самые долгие поисковые запросы: запрос, время исполнения в секундах, количество найденных объектов.

=== Индексация/удаление объекта ===
<pre>
delete("item{$id}"); 
set("item{$id}#{$rate},{$sate}", $object_q);
</pre>
где $id - это глобальный индекс объекта; $object_q - поисковое описание объекта. В $object_q название объекта отделяется от описания символом табуляции. 
<br>
Запрос set не сбрасывает опциональные рейтинги объекта. Если действительно нужно сбросить
опциональные  рейтинги, надо перед запросом set вызвать запрос delete.
<br>
В поле ''date'' по умолчанию храниться время первой индексации, т.е. повторные вызовы set его тоже не изменяют.

=== Добавление тегов к объекту ===
<blockquote>add("tags{$id}", $tags); </blockquote>
Длина $tags не должна превышать 255. Фича реализована преимущественно для тегов, а не для произвольного текста. Перед использованием, желательно быть уверенным в том, что у объекта данные теги не были ранее установлены. В противном случае, при неограниченном количестве ''add-tags'' запросов с одинаковым $id, возможны проблемы при переиндексировании.

===Удаление объектов с заданным хешом===
<blockquote>
delete("itemswithhash${hash}");
</blockquote>
Данная операция медленная и должна выполняться только по запросу модераторов.
<br>
Чтобы операция выполнилась, движок должен быть запущен с ключом универсального флага.

Удаление несколько хешей за один раз (более эффективная операция, чем удаление хешей по одиночке).
<blockquote>
set("delete_items_with_hash", implode (",", $array_with_hashes), 0, 0);
</blockquote>

Удаление несколько рейтингов за один раз.
<blockquote>
set("delete_items_with_nate", implode (",", $array_with_nates));
</blockquote>
$array_with_nates - содержит nate в десятичном формате.
<br>
Чтобы операция выполнилась, мастер копии поиска должны быть запущены с ключом -Rn. Смотреть в статистике поле (delete_many_rates_mask=2048).

<blockquote>
set("hashlist_assign_max_rate{$rate_value}",implode (",", $array_with_hashes));
</blockquote>
Данная команда увеличивает rate до значения $rate_value, для всех объектов у хеш которых находится в $array_with_hashes. Для увеличения sate, hate, и т.д, суффикс должен быть "sate" и "hate" cooтветственно. 
<br>
Если поиск запущен с ключом -Rn, то можно изменять nate запросом:
<blockquote>
set("change_many_nates", $comma_separated_ints);
</blockquote>
$comma_separated_ints - список из четного числа целых чисел, разделенных запятыми, задающий пары старый рейтинг, новый рейтинг.
<br>
Рекомендуется посылать не более 40000 пар чисел.

=== Режим поиска группировки по хешам===
Если у <b>item</b> не установлен хеш, то считается, что он различен по хешу с любым другим <b>item</b>. 
<br>
При реализации неустановленный хеш считается равным нулю. 
<br>
Хеш - 64-битное целое. 

==== Алгоритм работы, если нужно вернуть выборку ====
В текстовом режиме search-engine возвращает строку
* количество объектов подошедших под поисковый запрос (такое же число, как и в обычном поиске).
* тройки (item_id, рейтинг, хеш) - если не указано сортировка i или I. И двойки (item_id, хеш) в противном случае. Для экономии сетевого трафика хеши возвращаются без лидирующих нулей.
Все элементы строки отделяются друг от друга запятой.

В двоичном режиме search-engine возвращает
* количество объектов подошедших под поисковый запрос (int32)
* тройки (item_id, рейтинг, хеш) или двойки  (item_id, хеш),  где item_id: int64, рейтинг: int32, хеш: int64.

===Алгоритмы сжатия индекса ===
* код Голомба
* LLRUN
* Интерполяционный код
* Избыточный интерполяционный код (позволяет быстро перескакивать по сжатому списку)

{|
|+ 
|-
| ./search-index -0
| Всегда кодирует списки кодом Голомба
|-
| ./search-index -1
| Выбирает из лучший трех методов (Голомб, LLRUN, Интерполяционный код). Интерполяционный код будет использоваться, если он сжимает на 10% лучше, чем лучший из двух первых методов.
|-
| ./search-index -2
| Если требуется наибольшая экономия памяти при декодирование, а не скорость работы.
|-
| ./search-index -x64
| Кодирует списки избыточным интерполяционным кодом. Индексатору передается дополнительный параметр. Для всех поддеревьев с заданным размером будет сохранено - сколько битов требуется для кодирования его левого поддерева. При параметре равном 64 размер данных увеличивается на 5 процентов. 
|}


=== Поиск ===
<pre>
Синтаксис: get("search{$extra}({$tags}{$query})") 

Поле $extra показывает как сортировать результаты поиска, и сколько их выдать. 
Синтаксис: 
поле имеет вид 
#(Тип сортировки)(Модификатор типа сортировки)(Количество объектов, которые нужно вернуть) | #(Тип сортировки)(Количество объектов, которые нужно вернуть) | пустое поле 
(Тип сортировки) => i|I|r|R|s|S|?|b|B|c|C|d|D|f|F|g|G|h|H|k|K|l|L|m|M|n|N 
значения:
? - в случайном порядке
i - по возрастанию "номера объекта" - примерно по дате загрузки
I - по убыванию "номера объекта"
r - по возрастанию rate
R - по убыванию rate
s - по возрастанию sate
S - по убыванию sate
d - по возрастанию date (по дате загрузки)
D - по убыванию date
b - по возрастанию bate
B - по убыванию bate
и.т.д. 

(Модификатор типа сортировки) => X|P|U|%
X - "расширенный" режим 
P - результаты будут отсортированы по числу вхождений ключевых слов в название объекта (исключив описание). При равенстве показателей будет использован основной критерий.
U - включает режим группировки по хешам
V - включает режим, в котором возвращаются только те результаты, когда все слова в поисковом запросе были найдены в заголовке (заголовок - это подстрока до первого символа табуляции). Если был включен "расширенный" режим данный флаг игнорируется.
T - включает режим, в котором возвращаемые результаты не обязательно содержат все слова из поиского запроса. Если вместе с 'T' указан режим 'P', то в случае когда найден хотя бы один объект со всеми словами из поискового запроса, то все возвращаемые объекты тоже будут содержать все слова из поискового запроса (в противном случае, поведение как в режиме "T"). Формат возвращаемого ответа аналогичен, режиму 'P'. Объекты содержащие все слова из поиcкового запроса сортируется примерно по количеству слов в заголовке. Данный режим примерно в 3 раза медленнее стандартного поиска, поэтому его не рекомендуется использовать в поисках с критической загрузкой процессора. Для этого режима, рекомендуется системным администраторам индексировать движок с ключом -1. Максимальное количество слов из запроса, которых может не быть в описании объекта по умолчанию равно 2 (но его может изменить системный администратор с помощью ключа -M). Feature внедрена начиная с движка search-engine-0.2.35.
% - результаты будут возвращены в двоичном формате. Двоичный формат должен использоваться только для общения search-engine с search-merge. Если этого модификатора нет search-engine считает, что его вызвал php.

(Количество объектов, которые нужно вернуть) => целое число, не превосходящее некой константы. (сейчас 65536). Если количество не указано будет возвращено только количество найденных объектов, без их перечисления. 

Кроме того, к полю $extra может быть приписано ограничения диапазона поиска в формате "[{$min_value}{$rate}{$max_value}]", где $rate должно принимать значение первой заглавной латинской буквы соответствующего рейтинга (например для sate, $rate === "S"). 
Одно из полей $min_value или $max_value может быть опущено. Внутри результатов, подходящих под данный диапазон, сортировка происходит согласно указанному ранее типу сортировки. 
Кроме того, к полю $extra может быть приписано "<{$hash}>", что означает возвращать только результаты с заданным хешом. 
Можно добавить ограничение по маске для выборки, если к полю $extra приписать "[{$mask}{$rate}{$value}]", где $rate должно принимать значение первой строчной латинской буквы соответствующего рейтинга. Тогда из выборки будет удалены все результаты у которых ($rate & $mask) не равны $value. Нельзя указывать одновременно ограничение диапазона и ограничение по маске для одного рейтинга. Для одного рейтинга нельзя указывать более 10 ограничений. 

Поле $tags является списком тэгов - дополнительных "поисковых слов", генерируемых с помощью функции makeTag из global.php. Эти слова гарантированно не встретятся собственно в поисковом запросе, и позволяют ограничивать диапазон поиска с помощью дополнительных критериев. Например, тэгами являются марка и год выпуска машины. 
Некоторые движки при индексации к описанию каждого объекта добавляют "универсальный тэг", позволяющий получить все объекты, а так же пользоваться операцией "not" в расширенном режиме движка. 

Поле $query является текстом поискового запроса в кодировке win-1251, приведенным к нижнему регистру. Все символы с кодами не превосходящими 32 должны быть заменены на '+'. 

Необходимо кэшировать результаты поисковых запросов

Первое число результата - количество объектов подошедших под поисковый запрос, дальнейшие - зависят от типа сортировки. Для i, I и ? перечисляются только найденные объекты, а для r, R, s и S перечисляются поочередно объекты и тот их рейтинг, по которому велся поиск (например 25359700_99673627,0,5595400_102062348,0). В случае если указан модификатор P перечисляются поочередно объекты и 'степень вхождения поискового запроса в название объекта'. 
Во всех случаях разделителем является запятая. 
Поиск с учетом длины текста документа, опциональных тегов
"search$type#$use_relevance,$only_title_search,$opttag_coeff,$rating_weights$selection_size$restrictions($tags_and_query)";
возвращает выборку в формате аналогичном search, каждый объект возвращается вместе с рейтингом. При запросе searchu каждый объект возвращается вместе с рейтингом и хешом. Рейтинг в данном случае, вещественное число от 0.0 до 1.0, преобразованное в int от 0 до 2147483647. 
Объекты возвращаются по убыванию рейтинга.
$type
если $type = 'x', без группировки по хешам
если $type = 'u', группировка по хешам
если $type = 'un', группировка по хешам, но в качестве хеша используется nate
$use_relevance
Если $use_relevance равно "1", то рейтинг делится на квадратный корень количества уникальных слов (движок должен быть запущен с ключом -W). $use_relevance может принимать вещественные значения от 1/4 до 4. Чем выше use_relevance, тем большее предпочтения отдаётся item с меньшим количеством уникальных слов в заголовке или заголовке и в тексте (если $only_title_search = 0).
Если $use_relevance равно 0, то количество уникальных слов не влияет на сортировку.
$only_title_search равно "1", если искать только в заголовке. Иначе - "0".
$opttag_coeff определяет вклад в рейтинг пропорционально (1.0 + $opttag_coeff * sum_of_weights_of_all_optional_tags_in_item) / (1.0 + $opttag_coeff * sum_of_weights_of_all_optional_tags_in_query))
$rating_weights = "{$rate_weight}{$rate_normalize_function_type}R"; #optional ('R' - по убыванию, 'r' - по возрастанию)
$rating_weights .= "{$sate_weight}{$sate_normalize_function_type}S"; #optional
$rate_normalize_function_type может быть 'L' - логарифмической или 'l' - линейной функцией.
$rating_weights .= "{$priority_weight}lP"; #линейно комбинировать с остальными рейтингами P-рейтинг (количество слов в заголовке / количество слов в запросе)), теги при вычислении P-рейтинга не считаются словами.
Если время создания объекта содержится в rate, то можно приписать к $rating_weights ("{$half_life}TR"), что позволит сортировать объекты, как это сделано в NewsRecommendations. При использовании этой возможности, желательно, добавить ограничение : rate >= now - 30 * {$half_life}.
$selection_size - размер выборки или 0 в случае, если нужно вернуть только количество найденных объектов.
Нельзя при запросе searchu (группировка по хешам), указывать $selection_size равным нулю.
$restrictions = "[12R30][S10000][7777777D]<$hash>"; #ограничения на выборку, как и в обычном search
$tags_and_query - обязательные теги,слова поискового запроса и опциональные теги разделенные плюсом
Обязательные теги обязательно идут в начале запроса, а опциональные в конце.
Обязательный тег всегда должен в найденном документе, а опциональный только вносит вклад в рейтинг документа. Установить вес опционального тега, можно с помощью добавления специального тега makeTag('~',$opttag_weight) после опционального тега. По умолчанию вес опционального тега равен 1.

Подбор веса рейтингов
Чтобы смешать два разных рейтинга (например rate и sate) в одинаковых пропорциях, рекомендуется вычислять максимальной rate и sate среди всех объектов используя универсальный тег. Нормализация необходима, если заранее не известен диапазон изменения rate и sate. 

Поскольку эта операция медленная, её результат желательно кешировать на сутки. 

$rate_weights = (1.0 / ($max_rate + 1.0)).'lR'.(1.0 / ($max_sate + 1.0))).'lS'; 

Если надо смешивать с P-рейтингом, то в числителе вместо 1.0 надо использовать 2147483647.0. 
Проверка принадлежности объекта большому списку

get("contained$item_id$query"); 
Возвращает '1', если объект принадлежит списку.
Возвращает '0', если объект не принадлежит списку.
Возвращает 'ERROR near $s', если ошибка в формате запроса.
</pre>


