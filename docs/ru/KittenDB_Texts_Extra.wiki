== Поиск ==

Следующие функции опциональны и доступны только в том случае, если при запуске text-engine и при переиндексировании была включена опция <tt>-i</tt> (индексировать сообщения). Если нужно использовать стеммер, должна быть также включена опция <tt>-S</tt>.

=== Простой поиск по ящику ===
<code>get("search($uid,$num,$query)")</code>
<br>
Возвращает список local_id сообщений пользователя $uid, соответствующих поисковому запросу $query (т.е. содержащих как минимум все слова, которые есть в $query). Список предваряется количеством найденных сообщений, значения возвращаются в десятичной системе и разделяются запятыми, аналогично запросам get peermsglist (см. выше). Все служебные символы и пробелы в $query должны быть заменены на плюсы.
<br>
Параметр $num представляет собой максимальное количество возвращаемых local_id (при этом будет возвращено полное количество найденных сообщений). Если $num положителен, возвращаются первые $num local_id в порядке возрастания; иначе - последние -$num local_id в порядке убывания.

=== Расширенный поиск по ящику ===
<code>get("xsearch($uid,$and_mask:$xor_mask,$peer_id,$min_time,$max_time,$max_res,$query)")</code>
<br>
Функция аналогична предыдущей, однако позволяет задать флаги в формате <code>$and_mask:$xor_mask</code> (значение <code>-1:-1</code> означает использовать некоторое значение по умолчанию), peer_id (если передается 0, то возвращаются сообщения с произвольными peer_id), а также диапазон unixtime создания сообщений (если max_time не 0, то возвращаются сообщения с min_time &lt;= creation_date &lt; max_time).

== Работа с историей ==

История изменений (данного ящика) состоит из записей семи типов, нумеруемых положительным 32-битным числом - ''timestamp''. При запуске timestamp каждого ящика устанавливается в случайное значение. При любом действии, приводящем к изменению ящика, создается новая запись в истории с timestamp, большим на единицу. Следует отметить, что этот тип истории не сохраняется при перезапуске text-engine.

=== Получение текущего timestamp ===

<code>get("timestamp$uid")</code>
<br>
<code>get("force_timestamp$uid")</code>
<br>
Получает последний использованный timestamp для данного ящика. Если его нет (например, никаких действий с этим ящиком давно не производилось), может вернуть <code>false</code>. Вторая форма создает случайный timestamp, если его не было.

=== Получение последних действий ===
<code>get("history$uid#$timestamp[,$limit]")</code>
<br>
Получает историю изменений указанного ящика, начиная с записи $timestamp+1 до текущей, либо не более $limit записей, если $limit указан. Если запись $timestamp была слишком давно и информация о ней не сохранилась, возвращает <code>false</code>.
<br>
В противном случае возвращается строка, состоящая из десятичной записи 3N+1 числа. Первое число - это новый timestamp (т.е. timestamp последнего возвращенного события). Далее идет N троек чисел - описаний событий (при этом N=new_timestamp-old_timestamp). Поддерживаются следующие типы событий:

* <code>0,$local_id,0</code>  -- удаление сообщения с указанным local_id
* <code>1,$local_id,$flags</code> -- замена флагов сообщения (FLAGS:=$flags)
* <code>2,$local_id,$mask</code> -- установка флагов сообщения (FLAGS|=$mask)
* <code>3,$local_id,$mask</code> -- сброс флагов сообщения (FLAGS&=~$mask)
* <code>4,$local_id,$flags</code> -- добавление нового сообщения
* <code>5,$local_id,0</code> -- редактирование старого сообщения
* <code>6,$peer_id,$local_id</code> -- прочтение всех входящих сообщений с $peer_id вплоть до $local_id включительно (если $peer_id=0, это относится ко всем сообщениям и всем peer_id).
* <code>7,$peer_id,$local_id</code> -- прочтение всех исходящих сообщений с $peer_id вплоть до $local_id включительно.
* <code>8,-$user_id,$extra</code> -- друг $user_id стал онлайн
* <code>9,-$user_id,$flags</code> -- друг $user_id стал оффлайн ($flags равен 0, если пользователь покинул сайт (например, нажал выход) и 1, если оффлайн по таймауту (например, статус away))
* <code>$event,$place,$flags</code> -- "внешние" действия, информация о которых была передана через set history_action, где $event - тип события, от 50 до 99; $place - 32-битное целое; $flags - 16-битное целое. Желательно где-то продокументировать, что означают какие типы событий.
* <code>$event,-1,-1</code> -- для "расширенных" внешних действий, с $event от 100 до 191.

=== Получение последних действий в расширенном формате ===
<code>get("xhistory$uid#$timestamp[,$limit]")</code>
<br>
Запрос аналогичен предыдущему, однако в случае успеха возвращает N+1 строку, каждая из которых завершается переводом строки. Первая строка - это новый timestamp, каждая из последующих содержит номер события ($event), табуляцию, а затем либо два числа через запятую (для $event &lt;= 99), либо строку (для $event &gt;= 100).

=== Добавление внешнего действия в историю ===
<code>set("history_action$uid#$event", "$place,$flags")</code>
<br>
Здесь $uid - id пользователя, в историю событий которого надо добавить запись, $event - код события от 50 до 99, $place - 32-битное целое, $flags - необязательное 16-битное целое.

=== Добавление расширенного внешнего действия в историю ===
<code>set("history_action{$uid}#{$event}", $value)</code>
<br>
Здесь $uid -- id пользователя, $event -- код события от 100 до 191, $value -- произвольная строка, не более 65535 символов. ''Внимание'': если используется http-long poll, то в качестве $value следует использовать json-объекты в кодировке utf8, которые и будут возвращаться через long poll.

== Работа с постоянной историей ==
Если в text-engine включена поддержка постоянной истории (persistent history), можно пользоваться следующими функциями работы с постоянной историей (сохраняющейся при любом перезапуске text-engine). Они используют свой отдельный timestamp. Все события нумеруются, начиная с 1.

=== Получение текущего persistent timestamp ===
<code>get("p_timestamp{$uid}")</code>
<br>
Возвращает текущий persistent timestamp (для истории действий, которая хранится вечно). Если ящик еще пуст, вернется 1.

=== Получение последних действий ===
<code>get("p_history$uid#$timestamp[,$limit]")</code>
<br>
Получает (постоянную) историю изменений указанного ящика, начиная с записи $timestamp до текущей, либо не более $limit записей, если $limit указан.
