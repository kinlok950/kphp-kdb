'''KittenDB Cache''' ('''cache-engine''') --- это важная компонента системы кэширования контента, хранящая информацию о том, в каком узле кэша (а также на каком именно сервере и диске этого узла) хранятся копии тех или иных пользовательских файлов. Важно отметить, что cache-engine запускается в основном датацентре и используется при генерации ссылок на контент-файлы (видео, аудио, в перспективе - фото), а на самих узлах запущен гораздо более простой софт (в виде скриптов на баше и перле).

=== Общие соглашения ===
Все ключи запросов в качестве первого параметра содержат ''cache_id'' -- целое число 1..16383, идентифицирующее узел кэша. Каждый cache-engine обслуживает запросы ровно с одним cache_id, который фиксируется в записи LEV_START. Если нужно дробить мельче - используются младшие 64 бита от md5(URL) по модулю количества кусков, на которые надо подробить один кэш. 

Кроме того, часто используются ''node_id'' (идентификатор узла в диапазоне 1..16383, видимо, равный ''cache_id'' (?)), ''server_id'' (номер сервера в узле, 1..255), ''disk_id'' (номер диска на сервере, 1..255; 0 может означать, что запрос относится ко всем дискам указанного сервера).

=== Глобальный URL ===
Должен быть коротким, не должен зависеть от IP, но по нему должно быть возможно вычислить ссылку для скачивания, а также понять тип контента (аудио/видео/фото) и файла.

Пример: <tt>cs2345:/u123456/ab6456ef.flv</tt>.

Формат глобальных URL:
* "cs{$server}:/u{$uid}/{$file}.mp3" для '''аудио'''
* "vkadre{$server}:/{$file}.flv" для '''видео vkadre'''
* "cs{$server}:/u{$uid}/{$file}.{$ext}" для остальных '''видео''', $ext = (flv|mp4)

=== Локальный URL ===
''Локальный URL'' обозначает размещение копии файла внутри узла кэша. Он не должен зависеть от IP, и по нему должна быть возможность сгенерировать клиентскую ссылку для скачивания (возможно, зависящую от IP). Кроме того, по нему должен однозначно определяться узел кэша, сервер, диск и путь к файлу. Обычно имеет вид:
* "cs{$node_id}_{$server_id}/d{$disk_id}/{$file}.{$ext}
При этом {$file}.{$ext} обычно такие же, как у соответствующего глобального URL.

Пример: <tt>cs1_13/d23/ab6456ef.flv</tt>, где 1 = номер узла кэширования, 13 = номер сервера в узле, 23 = номер диска в сервере.

=== Информация об обращению к файлу ===
<code>get("access{$cache_id}:{$URL}")</code>
<br>
Возвращает 1 в случае успешного выполнения. Сообщает кэшу {$cache_id} об обращении к файлу, описываемому данным URL. В нашем случае URL -- это просто последовательность из не более чем 255 символов с кодами 33..127. Cache-engine незачем знать их точный смысл.

=== Допустимые значения периодов полураспада {$T}===
#3600
#86400
#604800
#2592000

=== Получение значения амортизационного счетчика ===
<code>get("acounter{$cache_id}:{$T}:{$URL}")</code>
<br>
Для получения значения амортизационного счетчика суммарного для всех файлов кеша, в качестве $URL используйте строку '__CUMULATIVE__'.

=== Получение списка популярных файлов ===
<code>get("top_access{$cache_id},{$T},{$limit},{$flags},{$min_rate}")</code>
<br>
<code>get("bottom_access{$cache_id},{$T},{$limit},{$flags},{$min_rate}")</code>
<br>
Возвращает популярный/непопулярный список из не более чем $limit URI, для заданного $cache_id и $T - амортизационного периода полураспада. Каждая cтрока с URI, заканчивается символом перевода строки.
$flags и $min_rate - необязательные параметры, равные по умолчанию 0.
{|
|+
|-
! флаг !! описание
|-
| +1 || выводить значение амортизационного счетчика
|-
| +2 || выводить размер файла
|-
| +4 || выводить значения амортизационных счетчиков для всех периодов полураспада
|-
| +8 || выводить только URI с неизвестным размером файла
|-
| +16 || выводить только URI, у которых нет локальных копий
|-
| +32 || выводить время, в течение которого уже горит желтый свет для локальной копии
|-
| +64 || выводить время, в течение которого еще будет гореть желтый свет для локальной копии
|}
Поля отделяются друг от друга табуляцией. Флаги 32 и 64 имеют смысл только для запросов, возвращающих local URI, т.е. get bottom_disk.
<br>
Если указан $min_rate, не будут возвращаться URI со значением амортизационного счётчика, меньшим чем $min_rate.
<br>
Начиная с версии '''cache-engine-1.00-r91''', если указан $min_rate, не возвращаются URI со значением амортизационного счётчика, меньшим или равным $min_rate.
<br>
Если $min_rate не меньше миллиона - то $min_rate делится на миллион (как вещественное число) ('''cache-engine-1.00-r94''').

=== Получение списка непопулярных закешированных файлов на данном диске===
<code>get("bottom_disk{$cache_id},{$T},{$limit},{$flags},{$node_id},{$server_id},{$disk_id}")</code>
<br>
Флаги +1,+2,+4,+32,+64 задают вывод, как и при запросе top_access. Возвращаются строки, содержащие localURI, табуляцию, globalURI, а затем, возможно, дополнительные параметры, определяемые флагами. Если $disk_id указать равным нулю, то возвращенный результат относится ко всему указанному серверу.

=== Получение суммарной статистики списка популярных файлов ===
<code>get("top_stats{$cache_id},{$T},{$limit}")</code>
<br>
<code>get("bottom_stats{$cache_id},{$T},{$limit}")</code>
<br>
Позволяет получить статистику по спискам, которые вернули бы соответствующие запросы top_access/bottom_access. Например, выдает общее количество файлов в ответе (&lt;=limit), количество файлов, для которых известен размер, сумму амортизационных счетчиков выбранных файлов, сумму размеров тех файлов, для которых он известен, и взвешенную сумму размеров (с учетом амортизационных счетчиков). 

=== Включение желтого света для локальной копии ===
<code>set("yellow_time_remaining{$cache_id}:{$global_URL}~{$local_URL}", $seconds_remaining)</code>
<br>
Включает желтый свет для указанной локальной копии на указанное число секунд (от 0 до 86400). Если передается 0, то желтый свет выключается. Если указанные URL не существуют или не соответствуют друг другу, то возвращается NOT STORED (т.е. false).

=== Получение параметров желтого света для локальной копии ===
<code>get("yellow_time_remaining{$cache_id}:{$global_URL}~{$local_URL}")</code>
<br>
Возвращает строку "{$yellow_remaining},{$yellow_enabled}" из двух десятичных чисел. Первое из них - сколько секунд желтый свет будет еще гореть для указанной локальной копии, второе - сколько секунд он уже горит. Если желтый свет выключен, возвращается "0,0". Если $global_URL или $local_URL не существуют или не соответствуют друг другу, возвращается "NOT_FOUND".

=== Установка размера файла ===
<code>set("file_size{$cache_id}:{$URL}", $filesize)</code>
<br>
Устанавливает размер файла с глобальным идентификатором $URL в величину $filesize (неотрицательное целое число, возможно, 64-битное, хотя чаще всего 32-битное).
Запрос возвращает false, если для указанного $URL, ранее не вызывался запрос access.
<br>
<code>get("file_size{$cache_id}:{$URL}")</code>
<br>
Возвращает размер файла.

=== Сообщение о том, что существует локальная копия файла в кэше ===
<code>set("new_local_copy{$cache_id}:{$global_URL}", $local_URL);</code>
<br>
Сообщает, что у файла с $global_URL есть локальная копия $local_URL. Этот $local_URL должен иметь вид <tt>cs{$node_id}_{$server_id}/d{$disk_id}/*</tt>, где $node_id -- число от 1 до 16383, обычно совпадающее с $cache_id; $server_id (1-255) и $disk_id (1-255) -- номера диска и сервера в узле, на котором хранится файл. Крайне желательно, чтобы оставшаяся часть $local_URL была бы такой же, как у $global_URL; тогда cache-engine может хранить $local_URL с помощью одного int'а. Кроме того, типичной является ситуация, когда одному файлу (т.е. $global_URL) соответствует не более одного $local_URL; однако в некоторых экзотических ситуациях (возникающих после временной поломки диска) это правило может нарушаться.
<br>
Если $local_URL не начинается на "cs{$node_id}_{$server_id}/d{$disk_id}/" или node_id, server_id, disk_id лежат за границами указанных значений, '''cache-engine''' вернёт false.

=== Удаление локальной копии файла из кэша ===
<code>set("delete_local_copy{$cache_id}:{$global_URL}", $local_URL);</code>

=== Получение локальной копии файла ===
<code>get("convert{$cache_id}:{$global_URL}")</code>
<br>
Возвращает $local_URL, соответствующей локальной копии файла $global_URL, либо сериализованный false, если нет доступных локальных копий. Если копий несколько, может вернуть любую.

=== Получение всех локальных копий файла ===
<code>get("local_copies{$cache_id}:${global_URL}")</code>
<br>
Возвращает список всех локальных копий файла, по одной на строчку. Каждая строчка, помимо $local_URL, содержит следующие данные, разделенные табуляциями: $node_id, $srv_id, $disk_id, $flags, $cached_at. Здесь $flags = 1 означает, что копия активна, $flags = 0 - что она временно недоступна. Кроме того, $flags = 2 означает, что для копии включен "желтый свет" (она присутствует, но не возвращается по get convert).

=== Временная (дез)активация файлов на удаленном сервере ===
<code>get("disable_server{$cache_id},{$node_id},{$server_id}")</code>
<br>
<code>get("enable_server{$cache_id},{$node_id},{$server_id}")</code>
<br>
Сбрасывает/устанавливает флаг доступности соответствующих локальных копий.

=== Временная (дез)активация файлов на удаленном диске ===
<code>get("disable_disk{$cache_id},{$node_id},{$server_id},{$disk_id}")</code>
<br>
<code>get("enable_disk{$cache_id},{$node_id},{$server_id},{$disk_id}")</code>
<br>
Сбрасывает/устанавливает флаг доступности соответствующих локальных копий.

<code>get("status_disk{$cache_id},{$node_id},{$server_id},{$disk_id}")</code>
<br>
Возвращает код доступности для заданного диска.
<br>
<code>get("status_server{$cache_id},{$node_id},{$server_id}")</code>
<br>
Возвращает число от 0 до 255 - количество включённых дисков на указанном сервере.

=== Постоянная дезактивация файлов на удаленном сервере ===
<code>delete("remote_server{$cache_id},{$node_id},{$server_id}")</code>
<br>
Заставляет забыть о всех локальных копиях, хранимых на указанном сервере.

=== Постоянная дезактивация файлов на удаленном диске ===
<code>delete("remote_disk{$cache_id},{$node_id},{$server_id},{$disk_id}")</code>
<br>
Заставляет забыть о всех локальных копиях, хранимых на указанном диске.

===Получение серверной статистики===
<code>get("detailed_server_stats{$cache_id},{$flags}");</code>
<br>
Позволяет получить детальную статистику по серверам. 
<br>
Каждая строка статистики сервера содержит: $node_id, $server_id, процент access-запросов, попавших на этот сервер, размер файлов на сервере, количество файлов на сервере. В статистику включаются только файлы для которых известен размер. Временно отключенные диски включаются в статистику.
{|
|+
|-
! флаг !! описание
|-
| +0 || сортировать по $node_id, $server_id
|-
| +1 || сортировать по убыванию процента access запросов
|-
| +2 || сортировать по убыванию размеров файлов
|-
| +3 || сортировать по убыванию количества файлов
|}
