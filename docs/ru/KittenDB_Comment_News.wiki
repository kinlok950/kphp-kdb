== Обращение к Comment News Engine из PHP через memcache-интерфейс ==

<code>$MC_News = new Memcache ($server_ip, $server_port);</code>

<code>$MC_News_Multiple = new Memcache ($server2_ip, $server2_port);</code>

Далее доступ к данным осуществляется по аналогии с memcached, с помощью функций вроде
<pre>
$MC_News->get($key);
$result = $MC_News->set($key,$value,0,600);
$MC_News->delete($key);
$MC_News->increment($key,$value);
</pre>
для специально построенных ключей $key и значений $value.

== Список доступных функций ==

=== Добавление обновления ===
<code>
$MC_News->set("comm_update$type,$owner,$place", "$type,$user,$group,$owner,$place,$item", 0, 600);
</code>
Добавляет новое обновление. Параметр - строка, состоящая из 6 чисел, имеющих следующий смысл:

{|
|-
| <tt>type</tt> || тип записи - число от 20 до 24
|-
| <tt>user</tt> || id пользователя, совершившего действие или 0
|-
| <tt>group</tt> || id группы, к которой относится действие или 0
|-
| <tt>owner</tt> || владелец объекта, к которому относится действие; часто равен user или -group; имеет смысл в паре с place и/или item
|-
| <tt>place</tt> || место, в котором было совершено действие (например, id фотографии или темы)
|-
| <tt>item</tt> || объект, с которым было совершено действие (например, id добавленного комментария или сообщения)
|}

Смысл поля <tt>type</tt>:

{|
|-
! <tt>type</tt> !! Смысл
|-
| 20 || Пользователем user добавлено сообщение owner+place+item в теме owner+place, находящейся в группе group
|-
| 21 || Пользователем user добавлен комментарий owner+item к фотографии owner+place, находящейся в группе group
|-
| 22 || Пользователем user добавлен комментарий owner+item к видеозаписи owner+place, находящейся в группе group
|-
| 23 || Пользователем user добавлен комментарий owner+item к заметке owner+place; при этом group=0
|-
| 24 || Пользователем user добавлен комментарий owner+item к статусу owner+place; при этом group=0
|}


=== Удаление всех обновлений данного объекта ===
<code>delete("comm_updates{$type}_{$owner}_{$place}")</code>
<br>
Удаляет все обновления, относящиеся к указанному объекту.

=== Удаление одного обновления данного объекта ===
<code>delete("comm_update{$type}_{$owner}_{$place}_{$item}")</code>
<br>
Удаляет (а на самом деле - прячет) обновления, относящиеся к указанному объекту, с переданным значением поля item.

=== Восстановление одного обновления данного объекта ===
<code>delete("undelete_comm_update{$type}_{$owner}_{$place}_{$item}")</code>
<br>
Восстанавливает (а на самом деле - делает видимыми) обновления, относящиеся к указанному объекту, с переданным значением поля item.

== Получение обновлений ==
<code>get("comm_updates{$date},{$enddate}_{$grouping}:{$object_list}");</code>
<br>
<code>get("comm_updates{$date},{$enddate}_{$grouping}>{$timestamp}:{$object_list}");</code>
<br>
<code>get("comm_updates{$date},{$enddate}_{$grouping}#{$limit}:{$object_list}");</code>
<br>
<code>get("comm_updates{$date},{$enddate}_{$grouping}>{$timestamp}#{$limit}:{$object_list}");</code>
<br>
Получает список обновлений, начиная с суток, определенных unixtime $date, до момента $enddate, если это не 0. Сутки отсчитываются по 24 часа, начиная с указанного момента времени до текущего момента.
<br>
Параметр $grouping равен 0, если не надо группировать однотипные записи; в противном случае он представляет собой максимальное возвращаемое количество различных значений параметров в каждой группе.
<br>
Параметр $timestamp, если он есть, означает, что нужно вернуть только записи, созданных после записи с данным timestamp. Параметр $object_list представляет собой либо список $type_$owner_$place нужных объектов, перечисленных через запятую, либо отрицательное число $list_tag, если этот список id очень большой.
<br>
Параметр $limit, если он есть, ограничивает сверху количество записей в возвращаемом массиве.

=== Передача большого списка объектов ===
<code>set("objectlist$list_tag", $list, 0, 600);</code>
<br>
Запоминает список объектов, идентифицируемый ''отрицательным'' случайным числом $list_tag. Параметр $list есть список строк вида "$type_$owner_$place", перечисленных через запятую. Кроме того, если $list начинается со строки <tt>0002</tt>, остаток разбивается на группы по 12 байтов, каждая из которых интерпретируется как представление трех 32-битных чисел - type, owner и place. Сразу после этого запроса должен следовать запрос вида <tt>get("comm_updates...")</tt>, ссылающийся на только что переданный список по значению $list_tag.

=== Формат списка обновлений ===
Результирующий список обновлений возвращается в виде PHP-массива, элементами которого являются массивы, каждый из которых представляет собой обновление или группу обновлений в следующем формате:
<br>
<code>array($type,$timestamp,$random_tag,$user,$group,$place,$item)</code>
<br>
Каждое из этих значений есть либо целое число, либо строка вида <tt>{$owner}_{$item}</tt>, либо массив значений, если значения подвергались группировке.
* $timestamp=$date есть unixtime события; для группы событий это время последнего из них.
* $random_tag есть случайное 32-битное число, позволяющее различать различные записи с одним и тем же $timestamp.
* Если производится группировка событий, то у группы устанавливается $random_tag, равный $random_tag самого первого из группируемых событий. Таким образом, $random_tag однозначно идентифицирует блок в результирующей html-странице.
* Массивами могут оказаться только поля $user, $group, $place и $item.
* В массиве сгруппированные значения перечисляются в антихронологическом порядке. Кроме того, первым значением массива является общее количество различных значений данного параметра; далее идут список самих значений, но не более, чем $grouping значений.

=== Получение обновлений в "сыром" виде ===
<code>get("raw_comm_updates[{$startdate},{$enddate}]:{$object_list}");</code>
<br>
<code>get("raw_comm_updates{$object_id}");</code>
<br>
Возвращает список обновлений для данного объекта или списка объектов в сыром виде: массив из 8N чисел, каждое обновление задается с помощью восьми чисел: $timestamp,$random_tag,$type,$user,$group,$owner,$place,$item.
<br>
Обновления группируются по $type+$owner+$place, а внутри - в антихронологическом порядке.
<br>
Если название ключа предваряется знаком <tt>%</tt>, результат будет возвращен в двоичном виде как последовательность из 32N байтов.

===Добавление и удаление закладкок===
<code>get("add_bookmark_{$type}_{$owner}_{$place}:{$user_id});</code> и <code>get("del_bookmark_{$type}_{$owner}_{$place}:{$user_id});</code>
<br>
или
<br>
<code>set("bookmark_{$type}_{$owner}_{$place}:{$user_id});</code> и <code>delete("bookmark_{$type}_{$owner}_{$place}:{$user_id});</code>
<br>
Возвращает "1" (или true), если закладка успешно добавлена/удалена. Внимание, закладка считается успешно добавленной/удалённой, если она должна быть действительно на этом сервере. В частности, если два раза добавить одну и ту же закладку, оба раза результатом будет "1".

=== Получение обновлений по внутреннему списку закладок ===
Можно использовать методы
<br>
<code>get("user_comm_updates{$date},{$enddate}_{$grouping}:{$user_id}[,{$type_mask}]");</code>
<br>
<code>get("user_comm_updates{$date},{$enddate}_{$grouping}>{$timestamp}:{$user_id}[,{$type_mask}]");</code>
<br>
<code>get("user_comm_updates{$date},{$enddate}_{$grouping}#{$limit}:{$user_id}[,{$type_mask}]");</code>
<br>
<code>get("user_comm_updates{$date},{$enddate}_{$grouping}>{$timestamp}#{$limit}:{$user_id}[,{$type_mask}]");</code>
<br>
<code>get("raw_user_comm_updates[{$startdate},{$enddate}]:{$user_id}[,{$type_mask}]");</code>
<br>
<code>get("raw_user_comm_updates{$user_id}[,{$type_mask}]");</code>

Значения возвращаются в точности так же, как и соответствующие запросы с $object_list. В случае, если наборы закладок совпадают, результаты в точности будут одинаковыми. Маска <tt>$type_mask</tt>, если есть, позволяет получить обновления только по закладкам указанных типов (бит 2<sup>type</sup> означает, что закладки типа <tt>type</tt> надо учитывать).

=== Получение внутреннего списка закладок ===
<code>get("raw_user_comm_bookmarks{$user_id}[,{$type_mask}]");</code>
<br>
Возвращает список из N закладок. Ответ содержит 3N чисел, разделённых запятыми. Каждая закладка описывается тремя числами - type, owner и place.
